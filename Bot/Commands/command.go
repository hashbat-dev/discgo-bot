package commands

import (
	"sort"

	"github.com/bwmarrin/discordgo"
	bang "github.com/hashbat-dev/discgo-bot/Bot/Commands/Bang"
	config "github.com/hashbat-dev/discgo-bot/Config"
)

type Command interface {
	Name() string
	Execute(*discordgo.MessageCreate, string) error
	PermissionRequirement() int
	Complexity() int
}

var (
	JumpTable = make(map[string]CommandJumpEntry)
)

type CommandJumpEntry struct {
	Command     Command
	Description string
}

func init() {
	// ===[Add Bang Commands]===========================================
	JumpTable["speech"] = CommandJumpEntry{bang.GetImage{ImageCategory: "speech"}, "Return a random Speech Bubble GIF from the Server's !speech pool"}
	JumpTable["addspeech"] = CommandJumpEntry{bang.AddImage{ImageCategory: "speech"}, "Reply to an image to add it to the Server's !speech pool"}
	JumpTable["delspeech"] = CommandJumpEntry{bang.DelImage{ImageCategory: "speech"}, "Reply to an image to delete it from the Server's !speech pool"}
	JumpTable["makespeech"] = CommandJumpEntry{bang.MakeSpeech{}, "Reply to an image to add a Speech Bubble graphic to the top of it"}
	JumpTable["ttsinfo"] = CommandJumpEntry{bang.TTSInfo{}, "Reply to a Text-to-Speech file generated by this bot to see submission information for the file"}
	JumpTable["flipleft"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "left"}, "Reply to an image to flip the Left half to the Right"}
	JumpTable["flipright"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "right"}, "Reply to an image to flip the Right half to the Left"}
	JumpTable["flipup"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "up"}, "Reply to an image to flip the Top half to the Bottom"}
	JumpTable["flipdown"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "down"}, "Reply to an image to flip the Bottom half to the Top"}
	JumpTable["flipboth"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "both"}, "Reply to an image to perform !flipleft and !flipright"}
	JumpTable["flipall"] = CommandJumpEntry{bang.FlipImage{FlipDirection: "all"}, "Reply to an image to flip perform all !flip operations"}
	JumpTable["reverse"] = CommandJumpEntry{bang.Reverse{}, "Reply to an Animated GIF to reverse it"}
	JumpTable["speedup"] = CommandJumpEntry{bang.ChangeSpeed{SpeedUp: true}, "Reply to an Animated GIF to speed the GIF up"}
	JumpTable["slowdown"] = CommandJumpEntry{bang.ChangeSpeed{SpeedUp: false}, "Reply to an Animated GIF to slow the GIF down"}
	JumpTable["wide"] = CommandJumpEntry{bang.Wide{}, "Reply to a static image or Animated GIF to Stretch it wide mode"}
	JumpTable["deepfry"] = CommandJumpEntry{bang.DeepFry{}, "Reply to an image of gif to Deepfry it"}
	JumpTable["shuffle"] = CommandJumpEntry{bang.Shuffle{}, "Reply to a gif to randomly shuffle the frames"}

	// Write the Help text
	writeBangHelpText()
}

func writeBangHelpText() {
	// 1. Extract the keys from the JumpTable
	keys := make([]string, 0, len(JumpTable))
	for key := range JumpTable {
		keys = append(keys, key)
	}

	// 2. Sort the keys alphabetically
	sort.Strings(keys)

	// 3. Use the sorted keys to access the corresponding CommandJumpEntry
	text := ""
	for i, key := range keys {
		entry := JumpTable[key]
		cmdText := "* **!" + key + "**: " + entry.Description
		if i > 0 {
			text += "\n"
		}
		text += cmdText
	}

	// 3. Set it in the Config
	config.UserBangHelpText = text
}
